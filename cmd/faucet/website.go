// Code generated by go-bindata. DO NOT EDIT.
// sources:
// faucet.html (8.986kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _faucetHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\xeb\x8f\xe3\xb6\x11\xff\xec\xfd\x2b\x26\xea\x25\x96\xbb\x2b\xc9\xbe\xcd\x0b\xb6\xe4\xe2\x72\xb9\x06\x57\xa0\x97\xa0\x97\xa0\x2d\x92\x7c\xa0\xc5\xb1\xc5\x5d\x8a\x54\x48\xca\x5e\xc7\xf0\xff\x5e\x90\xa2\x64\xf9\xb1\xdb\x7b\x04\x28\x7a\x1f\xbc\x22\x39\x9c\xf9\x71\x66\x38\x0f\xe9\xd2\x4f\xbe\xfd\xfe\xe5\x8f\xff\xfe\xe1\x15\x14\xa6\xe4\xf3\xab\xd4\xfe\x01\x4e\xc4\x2a\x0b\x50\x04\x76\x02\x09\x9d\x5f\x0d\xd2\x12\x0d\x81\xbc\x20\x4a\xa3\xc9\x82\xda\x2c\xa3\xaf\x83\x6e\xbe\x30\xa6\x8a\xf0\xb7\x9a\xad\xb3\xe0\x5f\xd1\x4f\x2f\xa2\x97\xb2\xac\x88\x61\x0b\x8e\x01\xe4\x52\x18\x14\x26\x0b\x5e\xbf\xca\x90\xae\xf0\xb0\x4d\x90\x12\xb3\x60\xcd\x70\x53\x49\x65\x7a\x94\x1b\x46\x4d\x91\x51\x5c\xb3\x1c\x23\x37\xb8\x01\x26\x98\x61\x84\x47\x3a\x27\x1c\xb3\x49\x30\xbf\xba\x1a\xa4\x86\x19\x8e\xf3\xdd\x2e\x7e\x83\x66\x23\xd5\xfd\x7e\x3f\x85\xbf\x92\x3a\x47\x93\x26\xcd\x9a\xa5\xe2\x4c\xdc\x43\xa1\x70\x99\x05\x16\xa9\x9e\x26\x49\x4e\xc5\x9d\x8e\x73\x2e\x6b\xba\xe4\x44\x61\x9c\xcb\x32\x21\x77\xe4\x21\xe1\x6c\xa1\x13\xb3\x61\xc6\xa0\x8a\x16\x52\x1a\x6d\x14\xa9\x92\xdb\xf8\x36\xfe\x2a\xc9\xb5\x4e\xba\xb9\xb8\x64\x22\xce\xb5\x0e\x40\x21\xcf\x02\x6d\xb6\x1c\x75\x81\x68\x02\x48\xe6\x1f\x24\x76\x29\x85\x89\xc8\x06\xb5\x2c\x31\xf9\x3c\xfe\x2a\x1e\x3b\x89\xfd\xe9\xa7\x85\x5e\x0d\x52\x9d\x2b\x56\x19\xd0\x2a\x7f\x67\xb1\x77\xbf\xd5\xa8\xb6\xc9\x6d\x3c\x89\x27\x7e\xe0\xc4\xdc\xe9\x60\x9e\x26\x0d\xc3\xf9\xc7\xb0\x8e\x84\x34\xdb\xe4\x79\xfc\x79\x3c\x49\x2a\x92\xdf\x93\x15\xd2\x56\x90\x5d\x8a\xdb\xc9\x3f\x4a\xec\x63\xf6\xbb\x3b\x35\xdf\x1f\x20\xab\x94\x25\x0a\x13\xdf\xe9\xe4\x79\x3c\xf9\x3a\x1e\xb7\x13\xe7\xec\x2d\x7f\x6b\xaf\xf9\xd5\x60\x10\xaf\x51\x19\x96\x13\x1e\xe5\x28\x0c\x2a\xd8\x5d\x0d\x06\x83\x92\x89\xa8\x40\xb6\x2a\xcc\x14\x26\xe3\xf1\xa7\xb3\x0b\x93\xeb\xc2\xcd\x52\xa6\x2b\x4e\xb6\x53\x58\x72\x7c\x70\x33\x84\xb3\x95\x88\x98\xc1\x52\x4f\xa1\xe1\x6a\xe7\xf7\x56\x5a\xa5\xe4\x4a\xa1\xd6\x8d\x98\x4a\x6a\x66\x98\x14\x53\xeb\x44\xc4\xb0\x35\x9e\x13\xea\x8a\x88\x53\x6a\xb2\xd0\x92\xd7\x06\x8f\x01\x2c\xb8\xcc\xef\xdd\x94\xbb\xaa\x3d\xe4\xb9\xe4\x52\x4d\x61\x53\x30\xd3\x49\xa8\x14\x7a\xb6\x84\x52\x26\x56\x53\xf8\xb2\x6a\xf0\x97\x44\xad\x98\x98\xc2\xd8\x93\xa6\x89\xd7\x56\x9a\x34\x51\xe8\x2a\x5d\x48\xba\x9d\x5f\xa5\x94\xad\x21\xe7\x44\xeb\x2c\x38\x51\xa3\x0b\x2e\xbd\x65\x1b\x52\x08\x13\xcd\xc2\xd1\x8a\x92\x9b\x00\x9c\x80\x2c\x68\x24\x47\x0b\x69\x8c\x2c\xa7\x30\xb1\x88\xdc\x86\x13\x5e\x3c\xe2\xab\x68\xf2\xbc\x59\x1a\xa4\xc5\xa4\x65\x60\xf0\xc1\x44\x4e\xff\x9d\xe6\x83\x79\xca\xda\x9d\x4b\x02\x4b\x12\x2d\x88\x29\x02\x20\x8a\x91\xa8\x60\x94\xa2\xc8\x02\xa3\x6a\xb4\x1e\xc2\xe6\xd0\x0f\x62\x5d\x0c\x2b\x26\x0d\x8a\x84\xb2\xb5\x3b\x40\xf7\x70\x72\x92\xc7\xc0\x7e\x0d\xfe\x41\x2e\x97\x1a\x4d\xd4\x61\xef\x91\x32\x51\xd5\x26\x5a\x29\x59\x57\x7e\x75\x90\xba\x39\x60\x34\x0b\x6a\xc5\x03\x1f\xa9\xdd\xa3\xd9\x56\xfe\xc0\x41\x77\x3c\xa9\xca\xc8\x6a\x5a\x49\x1e\x40\xc5\x49\x8e\x85\xe4\x14\x55\x16\xbc\x72\xbe\xbd\x95\xb5\x82\x6f\x5e\xbc\x05\x42\xa9\x75\xae\x38\x8e\x3b\x49\xce\xcf\xce\x91\x44\x0b\x23\x5a\x1a\x4b\xb6\xa8\x8d\x91\x1d\xe1\xc2\x08\x58\x18\x11\x51\x5c\x92\x9a\x1b\xa0\x4a\x56\x54\x6e\x44\x64\xe4\x6a\x65\x93\x4e\x83\xb2\xd9\x14\x00\x25\x86\xf8\xa5\x2c\x68\x69\x5b\x53\x10\x5d\xc9\xaa\xae\xbc\x31\x9a\x49\x7c\xa8\x88\xa0\x48\xad\xe9\xb8\xc6\x60\xfe\x1d\x5b\x23\x94\x08\x6f\xdc\x6d\x81\x1f\xe5\x3d\x8a\xc1\xa9\x81\x73\xa2\xd0\x44\x7d\xde\x67\x66\x4e\x93\x06\x53\x73\x32\xf0\xff\xd2\x9a\xb7\x9c\xba\x93\x94\x28\x6a\x38\x1a\x45\xca\xc6\x80\x60\xbe\xdb\x29\x22\x56\x08\xcf\x18\x7d\xb8\x81\x67\xa4\x94\xb5\x30\x30\xcd\x20\x7e\xe1\x1e\xf5\x7e\x7f\xc4\x1d\x20\xe5\x6c\x9e\x92\xa7\x9c\x15\xa4\xc8\x39\xcb\xef\xb3\xc0\x30\x54\xd9\x6e\x67\x99\xef\xf7\x33\xbd\x2d\x17\x92\x67\xc3\xe6\xdc\xee\xd8\xc3\x19\xec\x76\x6c\x09\xcf\xe2\x7f\x60\x4e\x2a\x93\x17\x64\xbf\x5f\xa9\xf6\x39\xc6\x07\xcc\x6b\x83\xe1\x68\xb7\x43\xae\x71\xbf\xd7\xf5\xa2\x64\x26\x6c\x79\xda\x79\x41\xf7\x7b\x7b\x10\x0f\x7e\xbf\x4f\x13\x32\x4f\x13\xce\xe6\x7e\xf1\x58\x3d\x49\xcd\x3b\x57\x48\x13\xeb\x31\x7e\xb8\xdb\x01\x5b\x42\xfc\x0d\x56\xcf\xf1\xb5\x58\x4a\x0d\x7e\xeb\xff\x8b\x5f\xfd\x80\xab\xd5\x16\x8c\xd5\xab\xfe\x1f\xb9\x13\x74\xfe\xd4\x18\xfb\x06\x9e\x2d\x5a\x7d\x3a\xaf\x3a\x68\xb7\x55\xae\x55\xdc\x7b\xb8\x94\x77\xa2\xdd\xce\x4b\xd8\xef\x3f\xcc\x85\x1c\x90\xb0\xc7\xe6\xc8\x95\x3a\xd0\xfe\x1a\xbc\x35\x6a\xbf\x87\x1e\xf5\x87\xfb\x18\x0a\xda\x3a\x56\x13\x81\x1d\xfa\x3e\xf8\xb3\xa0\xba\x8a\xba\xe3\x78\x3f\xd1\xcc\xe0\x3d\x6e\xb3\x60\xb7\xeb\xef\xf4\xab\x39\xe1\x7c\x41\x9c\xb6\xdc\x59\xbb\x4d\xbf\xa3\xf5\xdf\x35\xd3\xae\x9a\x9e\xb7\xf2\xbb\x13\xfc\xf7\xdc\x70\x92\xe5\x8c\xac\xa6\x70\xfb\xfc\xa9\x14\xf7\xe5\x49\xd6\xb8\xbd\x90\x35\x2a\x22\x90\x83\xfb\x8d\x74\x49\x78\xfb\xec\xaf\x4e\x17\xdf\x4f\xb7\x44\x36\x87\x77\x98\xba\x22\x60\x3c\x03\xb9\x46\xb5\xe4\x72\x33\x05\x52\x1b\x39\x83\x92\x3c\x74\x75\xcf\xed\x78\xdc\x01\xb6\x5c\x0d\x59\x70\x74\xf9\x49\xe1\x6f\x35\x6a\xa3\xbb\x6c\xd4\x2c\xb9\x5f\x9b\x94\x28\x0a\x8d\xf4\x44\x09\x56\x9e\xd5\xa5\xa3\x6a\x91\xb6\xfa\xbb\x88\x7a\x29\xa5\x2f\x2f\xfa\x00\x3c\xd3\x5e\xdd\x13\xcc\x53\xa3\x0e\x8e\x64\xe8\x7b\x95\x08\xca\x16\xf6\x8f\x55\x08\x4d\x48\xb3\x67\xae\x10\x55\x53\x59\x5a\x37\x05\x37\x4c\x13\x43\x3f\x58\xae\xf5\xb5\x05\xd1\xf8\x2e\xc2\x5d\xb9\x77\x10\xee\x86\x1f\x27\xbd\x40\xa2\xcc\x02\x89\x79\x17\xf1\xcb\x5a\xd0\xde\xd9\xfb\x09\xf9\xe3\x50\xd4\x82\xad\x51\x69\x66\xb6\xef\x0a\x03\xe9\x01\x47\x33\xee\x03\x48\x13\xa3\x1e\x77\xb1\xc3\xe3\xd9\x05\xf6\x7f\xfd\x9f\xab\xb4\xeb\x4e\x92\x04\xbe\xe3\x72\x41\x38\xac\x2d\xc0\x05\x47\x0d\x46\x82\xad\xb5\xc0\x14\x08\x79\xad\x14\x0a\x03\xda\x10\x53\x6b\x90\x4b\x37\xbb\x74\xb5\xe4\xd5\x60\x4d\x14\x10\x63\xb0\xac\x0c\x64\xae\xc8\xb6\x33\x1a\xd5\xda\xf5\x09\x76\x60\x73\x7f\x7f\xad\x89\xdb\x41\xe0\xc7\xed\x55\x83\x0c\x7e\xfe\x75\x76\xe5\x00\x7d\x8b\x4b\x26\x10\x88\x55\x40\x6e\xbb\x04\x30\x05\x31\x90\x2b\x24\x06\x35\xe4\x5c\xea\x5a\x35\x38\x6d\xf6\x01\x8b\xb5\xe5\xd3\x70\xb5\xd3\x95\x93\xdb\xb2\x08\x0b\xa2\x8b\x91\xeb\x12\x14\x9a\x5a\x89\xc3\x4a\x33\x3b\x58\x4a\x05\xa1\xdd\xcc\xb2\xf1\x0c\x58\xda\x72\x8c\x39\x8a\x95\x29\x66\xc0\xae\xaf\x3d\xe9\x80\x2d\x21\x6c\xd7\x7f\x66\xbf\xc6\xe6\x21\xb6\xfc\x21\xcb\xe0\x20\x67\x60\x45\x79\x1e\xba\xe2\x2c\xc7\x90\xdd\xc0\x64\x34\x6b\xd6\x16\x0a\x49\xd3\xe2\xb8\x1e\xc6\xfd\xec\xaf\x06\xfb\x59\x5f\x07\x4e\xd9\x47\x5a\x68\x42\xb9\x06\x02\x2b\xa6\x0d\xd4\x8a\x5b\x3d\x58\xba\x46\xed\x5e\xcd\x8e\xaa\x7f\xfe\xb3\xf4\xe2\x1f\x7c\xd8\x6f\x20\x37\x2c\x62\x8d\x82\x86\x7f\x7b\xfb\xfd\x9b\x58\x1b\xc5\xc4\x8a\x2d\xb7\xe1\xae\x56\x7c\x0a\xcf\xc2\xe0\x4f\xb6\x64\x1f\xfd\x3c\xfe\x35\x5e\x13\x5e\xe3\x8d\x37\xe9\x14\xda\x54\x6f\x2d\x3e\x75\xbf\x67\x32\x6f\xc0\x3f\x4e\xe1\x58\xfc\x7e\x34\x9a\x5d\x4a\x80\xbd\x04\xae\x50\xa3\x09\x2d\x99\xcf\x53\xc7\x9a\x22\x50\xa2\x29\x24\xb5\xda\x50\x98\x4b\x21\x30\x37\x50\x57\x52\x78\xc5\x00\x97\x5a\xb7\x4e\xd7\xae\x67\xa7\x6e\xe0\x69\x33\x10\xb8\x81\x7f\xe2\xe2\xad\xcc\xef\xd1\x84\x61\xb8\x61\x82\xca\x4d\xcc\x65\x4e\x2c\xb9\x6d\x6a\x8d\xcc\x25\x87\x2c\xcb\xc0\xf7\xf5\xc1\x08\xfe\x02\xc1\x46\xdb\x0e\x3f\x80\xa9\x7d\xb4\x4f\x23\xb8\x86\xd3\xed\x85\xd4\x06\xae\x21\x48\x9a\xab\x64\xd3\x9d\x32\x09\xa9\x58\x30\xb2\xb7\xa0\xb5\x84\x14\x25\x6a\x4d\x56\xd8\x47\x8a\x6b\x14\xc6\xfb\x98\x3d\x4e\xa9\x57\x90\x81\xb3\x57\x45\x94\xc6\x86\x20\xb6\x01\xb8\x71\x36\xeb\xae\x8e\x28\xcb\x40\xd4\x9c\xb7\xfe\xd9\xdc\x84\x59\xe3\x7d\x3d\xc2\xd8\x05\x44\xf8\x24\xcb\xc0\x86\x20\xab\x5f\xda\xee\xb1\x1e\xd0\xc4\xcb\x51\x6c\x63\xe0\x81\x7e\x34\x6b\xdd\xf8\x88\x0f\xd2\xa7\x19\x21\x3d\xe5\x84\xf4\x02\x2b\x97\x90\x1e\xe7\xd4\xa4\xaf\x1e\x23\x37\x71\x81\x8f\xa8\xcb\x05\xaa\xc7\x19\x35\xa9\xc8\x33\x72\xea\x7c\x2d\x4c\x6f\xe7\x0d\x4c\xbe\x1c\x5d\xe0\x8b\x4a\xc9\x47\xd8\x0a\x69\xb6\xe1\x8e\x93\xad\xac\xcd\x14\x86\x46\x56\x2f\x5d\xc2\x18\xde\x80\x95\x32\x85\x6e\xff\x8d\x6b\x06\xa6\x30\x74\x23\xbb\xce\x4a\x74\xbb\xbe\x18\x8f\xc7\x37\xd0\xbe\x49\xf9\x86\xd8\x1b\xa6\x6a\xdc\x5f\x40\xa2\xeb\x3c\x47\xfd\x88\xae\xde\x09\x8b\xe7\xd0\xa1\xf1\xe3\x0f\xc4\xd3\x85\xf8\x23\x40\xf0\xd9\x67\x70\xb6\xda\x77\xce\x24\x81\xbf\x13\x75\x0f\xae\x0c\x54\xb8\x66\xb2\xd6\x87\x74\x51\x32\xad\x99\x58\x01\xd1\x40\xa5\x40\xb7\xe3\x7d\x22\xf8\x19\x3a\x4f\x04\x73\x18\x9f\x42\xb3\xb1\xae\x17\xe1\x2f\x04\xfe\x8e\x6b\x3f\xaa\x0f\xf6\x07\x49\x47\x7b\x58\x89\xf0\x49\x06\x41\x70\xd8\x76\xb6\x6e\x97\x3d\x9b\x81\x46\xf3\x63\xa3\xf7\xd0\x27\xb6\x4b\xc9\x67\x74\x63\x2b\xda\xf1\xe8\x48\xf8\xbe\x55\xe5\x8b\xaa\xb2\x1d\x07\x11\x5b\x17\xd9\x3a\x3d\x32\x61\x24\xc8\xda\x46\xc7\x9c\x70\x5b\xa3\x73\x74\x51\xc6\x6d\xb4\xca\xcc\x65\x59\x4a\x01\x19\x44\x93\xd9\x59\xf2\xeb\x69\xad\x3b\xcc\xa9\x19\x2e\x68\xf9\xd8\x14\xc7\x1a\x3a\x21\x8d\x26\x47\xca\x3f\xb2\xcb\x25\x03\x0c\x3a\xbc\xac\xd5\xdf\x91\x51\x5a\xab\xf4\xf5\xd3\x43\xdc\xec\xbe\x9e\xbc\x13\xf0\x6e\xb1\xaa\x75\x11\x9e\x40\x1b\xcd\x8e\x2d\xf0\xda\xa0\x22\x06\x5d\x4b\xe2\x34\x8e\xc2\x30\x85\x67\x8a\x07\x22\x6c\x39\x13\x29\x14\x14\x55\x5b\x01\xd8\x8e\xa6\x69\x40\x7a\x86\x71\x9f\x36\x7a\xae\xd2\x3b\xc7\x99\x16\x67\xc0\x60\x6e\xeb\x30\x60\x51\xd4\x9d\xc0\x15\x4b\x52\xa0\x6d\x57\x4f\x3c\xdb\x79\x61\xcf\x0d\x2d\x29\x72\x52\x69\xa4\x90\x41\xf3\x42\x3a\x1c\xc5\xb5\x60\x0f\xe1\x28\xf2\xe3\x53\x0e\xed\xba\xcb\x69\xce\x38\x0d\xe6\xeb\x0c\x82\xd4\x28\x5b\xf6\x0e\x03\xb8\xbe\x74\xa7\x6c\x76\x1c\xce\x5b\xe9\xfd\x8d\x00\xa9\xa1\x73\xd7\x4f\x35\xc5\xf8\x2f\x81\x6d\x73\x57\x4a\xd6\x82\x4e\x6d\x49\x14\x9e\x31\x25\x6b\x62\x88\x72\x3c\x47\x33\x38\x90\xbb\x6e\x78\x0a\xb9\xb5\xca\x0c\x9a\xa6\xcb\x35\xb2\xd0\xb5\x89\x6e\xb4\x90\x8a\xa2\x8a\x14\xa1\xac\xd6\x53\xf8\xbc\x7a\x98\xfd\xd2\x76\xce\xae\x42\x7f\x02\x68\xa5\x70\x7e\x86\x27\xcf\xdd\x2b\xb6\x6b\x08\xd2\xc4\x12\x3c\xcd\xa4\x3b\x68\xff\x75\x38\x5c\xe8\x41\xa0\x7b\x79\xed\xe7\x4b\x46\x29\x47\x0b\xb6\x65\x6e\x6f\x9b\xb5\xf9\xe1\xce\x1c\x8b\x03\xdf\x78\xb4\xf4\x7b\x40\xae\xf1\x51\xe2\xae\x7f\x19\x5a\x83\x47\xf6\xa0\xcc\xe9\xd9\xb7\x42\x6e\x5a\x0d\x9d\x06\xfc\x67\x0c\x5a\x2b\x57\x05\x85\x91\x77\xa8\x1b\x18\x6a\x5b\x93\x51\x3d\x1c\xc5\x45\x5d\x12\xc1\x7e\xc7\xd0\x26\x94\x51\xa3\x21\xd7\x10\x05\xc7\x71\xf5\x0c\xc8\xa1\xc1\x1e\xb6\x89\x69\xe8\x15\x37\x6c\xad\x69\x0d\x07\x87\x86\x7d\xf8\x1e\x5a\xb9\x2c\x21\x5a\x10\x05\xfd\x41\xd4\x66\x4b\x50\xd2\x4a\x6e\xd7\x16\x44\x0d\x9b\x26\xd0\xd5\xcd\x42\x6e\xb2\xe1\xed\xb8\x03\xd8\x18\xd6\xd9\x75\xe8\xfd\xea\xc4\x00\x16\x61\x7b\x01\xe7\x70\x3b\xfe\x78\xa4\x94\x88\x15\x9e\xa2\x37\x8a\x55\x48\x81\xe4\xb6\x09\xfe\xc3\x0f\xf1\xd1\xca\x7d\x6f\x78\xd6\xef\x5a\xb5\x39\xb7\x3c\xc2\x6a\x57\x3b\xad\xfe\xd9\xde\x2b\x48\x9c\x6e\xaf\x21\xb8\x70\x88\x47\x3c\xef\x88\xe8\xe4\xf2\x3e\x76\xaf\x5d\x2f\x1f\xf4\x93\x84\x2d\x3f\xbb\x57\x4f\xa3\xb8\x30\x25\x0f\x83\xd4\xb8\x0f\x54\x16\x67\xb7\xdb\x6d\x6e\xa6\x0f\xf5\xd6\xbe\xdf\x35\xd8\x1e\x19\x4f\xba\x1b\xe8\xd5\x11\x5d\x07\xd4\x16\x0d\x60\xbb\xa9\xbd\x6b\xa8\xde\x1a\xa2\x0c\x10\xf8\xe9\x35\xd4\x15\x25\xc6\x26\x21\x09\x36\xc5\xb9\x64\xd4\x7d\xcd\x5b\x10\xa5\x61\x29\xd5\x86\x28\x0a\xb5\x30\x8c\xdb\xf5\x2d\x10\x85\xbe\x26\xd3\x68\x5e\xdb\xa8\xb4\x26\x3c\x3c\xe9\xb3\x9e\x85\xc3\xb8\x6f\xd8\xe1\x28\x46\x92\x17\xa7\x64\x2e\xeb\x74\x12\x33\x78\xe3\x6a\xf0\xf0\x59\x68\x0a\xa6\x47\x31\x31\x46\x85\xc3\x23\x83\x0f\x47\xd6\x76\x93\xae\xef\xe9\x36\xa7\xbd\x2b\xf3\xd4\xfe\x43\x55\xeb\x33\x78\x4b\x9c\x6b\x1d\x36\x5e\x33\xbc\xe9\xf1\x3d\x76\x9a\xe1\xa7\x43\x6f\x92\xc3\xa5\x3d\xe0\xcf\x2e\x60\x38\x62\x3b\xb4\x77\x67\x78\x22\x98\x50\xfa\xd2\xde\x8b\x30\xb8\x70\x7b\xfb\x1e\x30\xf2\x8a\x6d\x22\xee\x13\x1a\x65\x82\xe2\xc3\x63\xea\x64\x74\x38\x8a\x75\xbd\x68\x7a\xff\xf0\x0b\xdf\xed\xb4\x44\xce\x2d\x4f\x03\xf9\x59\xfa\xb7\x02\x8e\x4b\x80\xe8\xa4\x64\x78\x22\xe6\x3b\x81\xf6\x34\xfb\x1b\xab\xdc\xf1\xc8\xbf\x18\x7a\xa5\x6d\x05\xc4\x74\x01\x04\x36\xb8\xd0\xae\x37\x07\xef\xc9\xee\x0d\x49\xf3\x26\xe4\xc5\x0f\xaf\xbb\xb7\x21\x9d\xa7\xdb\x22\xa4\xfb\x6e\x7e\xfe\xae\xe1\xe2\x67\xfa\xcd\x66\x13\xaf\xa4\x5c\xf1\xe6\x03\x7d\xf7\x32\xc2\x36\xea\xf1\x9d\x0e\x80\xe8\xad\xc8\x81\xe2\x12\xd5\xbc\xc7\xbc\x79\x43\x91\x26\xfe\xdb\x72\xd2\xfc\x4f\x98\xff\x04\x00\x00\xff\xff\xe3\x1a\x60\xac\x1a\x23\x00\x00")

func faucetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_faucetHtml,
		"faucet.html",
	)
}

func faucetHtml() (*asset, error) {
	bytes, err := faucetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "faucet.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4, 0x39, 0x34, 0xec, 0xfa, 0xbb, 0x13, 0x40, 0x45, 0x6d, 0x89, 0xde, 0x1d, 0x3d, 0x75, 0xd6, 0x28, 0xfa, 0xc1, 0xe1, 0x8f, 0x78, 0xea, 0x4, 0x40, 0x3c, 0xe, 0xcf, 0x6a, 0xa3, 0xe7, 0x3e}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"faucet.html": faucetHtml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"faucet.html": {faucetHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
